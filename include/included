


// include statements

#if defined(_WIN16) || defined(_WIN32) || defined(_WIN64) || defined(__WIN32__) || defined(__TOS_WIN__) || defined(__WINDOWS__)

    // crap
    #ifndef _WIN32_WINNT
        #define _WIN32_WINNT 0x600
    #endif

    #include <winsock2.h>
    #include <ws2tcpip.h>
    #include <iphlpapi.h>
    #pragma comment(lib, "ws2_32.lib")
    #pragma comment(lib, "iphlpapi.lib")

#else

    // unix
    #include <sys/types.h>
    #include <sys/socket.h>
    #include <netinet/in.h>
    #include <arpa/inet.h>
    #include <netdb.h>
    #include <unistd.h>
    #include <errno.h>

    #include <ifaddrs.h> // for listing adapters

    #define unix_os
    #if defined(__APPLE__)
        #define mac_os
    #else
        #define linux_os
    #endif
    // #define valid_socket(sock_no) (sock_no >= 0)
    // #define close_socket(sock_no) (close(sock_no))
    // #define get_socket_errno() (errno)

    // typedef int sock;

#endif



#if (defined(mac_os) && not defined(_LIBCPP_CTIME)) || (defined(linux_os) && not defined(_GLIBCXX_CTIME)) || (defined(crap_os) && not defined(_CTIME_))
    #include <ctime>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_CSTDIO)) || (defined(linux_os) && not defined(_GCLIBBCXX_STDIO)) || (defined(crap_os) && not defined(_CSTDIO_))
    #include <cstdio>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_CSTRING)) || (defined(linux_os) && not defined(_GCLIBBCXX_CSTRING)) || (defined(crap_os) && not defined(_CSTRING_))
    #include <cstring>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_STRING)) || (defined(linux_os) && not defined(_GCLIBBCXX_STRING)) || (defined(crap_os) && not defined(_STRING_))
    #include <string>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_MAP)) || (defined(linux_os) && not defined(_GCLIBBCXX_MAP)) || (defined(crap_os) && not defined(_MAP_))
    #include <map>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_SET)) || (defined(linux_os) && not defined(_GCLIBBCXX_SET)) || (defined(crap_os) && not defined(_SET_))
    #include <set>
#endif

#if (defined(mac_os) && not defined(_LIBCPP_LIST)) || (defined(linux_os) && not defined(_GCLIBBCXX_LIST)) || (defined(crap_os) && not defined(_LIST_))
    #include <list>
#endif


#if defined(unix_os)
    #define valid_socket(the_socket) (the_socket >= 0)
    #define invalid_socket (-1)
    #define close_socket(the_socket) (close(the_socket))
    #define socket_error() (errno)
    #define socket_type int
    #if defined(mac_os)
        #define socket_family_type char
    #else
        #define socket_fasocket_family_type unsigned short
    #endif

    
    // For dealing with the machine's adapters
    #define ifaddr_adapter_type struct ifaddrs*
    #define ifaddrs_get_adapter_name(this_adapter) std::string(this_adapter->ifa_name)
    #define ifaddrs_get_next_adapter(this_adapter) this_adapter->ifa_next
    #define ifaddrs_get_address_from_adapter(this_adapter) this_adapter
    #define ifaddrs_free_adapters(this_adapter) freeifaddrs(this_adapter)


    // For dealing with the machine's network adapter addresses
    #define ifaddrs_address_type struct ifaddrs*
    #define ifaddrs_get_next_address(this_address) NULL
    #define ifaddrs_address_sockaddr(this_address) this_address->ifa_addr
    #define ifaddrs_address_sockaddrlen(this_address) sizeof(*this_address->ifa_addr)
    #define ifaddrs_address_family(this_address) this_address->ifa_addr->sa_family


#else
    #define valid_socket(the_socket) (the_socket != INVALID_SOCKET)
    #define invalid_socket (INVALID_SOCKET)
    #define close_socket(the_socket) (closesocket(the_socket))
    #define socket_error() (WSAGetLastError())
    #define socket_type SOCKET
    #define socket_family_type int

    
    // For dealing with the machine's adapters
    #define ifaddr_adapter_type PIP_ADAPTER_UNICAST_ADDRESS
    #define ifaddrs_get_adapter_name(this_adapter)\
        [&] -> std::string {\
            const wchar_t* temp = this_adapter->FriendlyName;\
            std::string the_answer;\
            while (*temp) {\
                the_answer.push_back(static_cast<char>(*temp));\
                temp++;\
            }\
            return the_answer;\
        }()
    #define ifaddrs_get_next_adapter(this_adapter) this_adapter->Next
    #define ifaddrs_get_address_from_adapter(this_adapter) this_adapter->FirstUnicastAddress
    #define ifaddrs_free_adapters(this_adapter) free(this_adapter)


    // For dealing with the machine's network adapter addresses
    #define ifaddrs_address_type PIP_ADAPTER_UNICAST_ADDRESSES
    #define ifaddrs_get_next_address(this_address) this_address->Next
    #define ifaddrs_address_sockaddr(this_address) this_address->Address.lpSockaddr
    #define ifaddrs_address_sockaddrlen(this_address) this_address->Address.iSockaddrLength
    #define ifaddrs_address_family(this_address) this_address->Address.lpSockaddr->sa_family


#endif


#define byte char
#define buffer_size 100
#define one_kilo_byte 1024
#define four_kilo_bytes 4096
#define eight_kilo_bytes 8192

#if not defined(AI_ALL)
    #define AI_ALL 0x0100
#endif